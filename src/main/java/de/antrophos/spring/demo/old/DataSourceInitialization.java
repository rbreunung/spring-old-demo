package de.antrophos.spring.demo.old;

import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.retry.RetryContext;
import org.springframework.retry.support.RetryTemplate;

public class DataSourceInitialization {

    private static final String MESSAGE_TABLE = "CREATE TABLE IF NOT EXISTS messages (\r\n" + //
            "    id BIGINT GENERATED BY DEFAULT AS IDENTITY,\r\n" + //
            "    message CLOB\r\n" + //
            ");";
    private static final String H2_URL = "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1";
    private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceInitialization.class);

    public static DataSource getMyDataSource(boolean dataSourceFail) {
        // Your data source initialization logic here

        LOGGER.info("Initializing datasource ...");
        RetryTemplate retryTemplate = RetryTemplate.builder().fixedBackoff(10000).maxAttempts(3)
                .build();

        DataSource datasource = retryTemplate.execute(c -> initializeDataSource(c, dataSourceFail), context -> {
            throw new RuntimeException("Could not initialize datasource. All attempts failed.");
        });

        LOGGER.info("Success Initialized datasource.");
        return datasource;
    }

    private static DataSource initializeDataSource(RetryContext context, boolean dataSourceFail) {
        LOGGER.info("Initializing datasource attempt ...");
        DataSource dataSource = DataSourceBuilder.create().driverClassName("org.h2.Driver").url(H2_URL)
                .username("sa").password("").build();
        try (Connection connection = dataSource.getConnection()) {
            if (!connection.prepareStatement("select 1").execute()) {
                throw new RuntimeException("The data source is not initialized as expected.");
            }
            if (dataSourceFail) {
                throw new SQLException("Simulation of a data source fail.");
            }
        } catch (SQLException e) {
            LOGGER.error("Error initializing data source and making sanity check.", e);
            throw new RuntimeException("Error initializing data source and making sanity check.", e);
        }
        return dataSource;
    }

    public static JdbcTemplate getMyJdbcTemplate(DataSource myDataSource) {

        LOGGER.info("Initializing JdbcTemplate ...");
        JdbcTemplate jdbcTemplate = new JdbcTemplate(myDataSource);
        LOGGER.info("Successful Initialized JdbcTemplate.");
        jdbcTemplate.execute(MESSAGE_TABLE);
        LOGGER.info("Successful initialized data model.");
        return jdbcTemplate;
    }
}
